Clone Graph

Given the Adj List  [[2,4],[1,3],[2,4],[1,3]]
Reference node is given 
Each node have val and its Adj List 

class Node {
    public int val;
    public List<Node> neighbors;
}

Each node's value is the same as the node's index (1-indexed). 
For example, the first node with val == 1,
             the second node with val == 2, and so on.

/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/


â€¢ Using DFS 

class Solution {
public:
    void dfs(Node* node, Node* copy, vector <Node*> &vis){
        vis[copy->val] = copy;  // visiting node & storing node at it's value 
        
        //Iterating the node's Adj List
        for(auto x:node->neighbors){ 
            //if node is not visited
            if(vis[x->val] == NULL){
                // create new node 
                Node* newNode = new Node(x->val);
                // push it Adj List
                (copy->neighbors).push_back(newNode);
                // dfs call for newNode
                dfs(x, newNode, vis);
            }
            //if node is visited then
            else{
                 // push it to Adj List
                (copy->neighbors).push_back(vis[x->val]);
            }
        }
    }
    Node* cloneGraph(Node* node) {
        if(node == NULL){
            return NULL;
        }
        
        vector <Node*> vis(1000, NULL);  //visited nodes
        Node* copy = new Node(node->val); //reference node to cloned graph
        dfs(node, copy, vis);  // calling dfs to process forward node
        return copy;
    }
};
