You are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake.
Recover the tree without changing its structure.

Input: root = [1,3,null,null,2]
Output: [3,1,null,null,2]
Explanation: 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid.

 TC : O(N)
 SC : O(N)
    void dfs(TreeNode* root, vector <int> &values){
        if(root == NULL) return;
        dfs(root -> left, values);
        values.push_back(root -> val);
        dfs(root -> right, values);
    }
    
    void check(TreeNode* &root, vector <int> &values, int &ind){
        if(root == NULL) return ;
        check(root -> left, values, ind);
        ind++;
        if(root -> val != values[ind - 1]){
            root -> val = values[ind - 1];
            
        }
        check(root -> right, values, ind);
    }
    void recoverTree(TreeNode* root) {
        vector <int> values;
        dfs(root, values);
        sort(values.begin(), values.end());
        int n = values.size();
        TreeNode* newNode = root;
        int ind = 0;
        check(newNode, values, ind);
    }
    
    
TC : O(N)
SC : O(1)
    TreeNode* prev;
    TreeNode* first;
    TreeNode* middle;
    TreeNode* last;
    
    void inorder(TreeNode* root) {
        if(root == NULL) return;
        
        inorder(root->left);
        
        if(prev != NULL && (root->val < prev->val)) {
            if(first == NULL) {
                first = prev;
                middle = root;
            } else {
                last = root;
            }
        }
        
        prev = root;
        
        inorder(root->right);
        
    }
    
    void recoverTree(TreeNode* root) {
        first = middle = last = NULL;
        prev = new TreeNode(INT_MIN);
        inorder(root);
        if(first && last) swap(first->val , last->val);
        else swap(first->val , middle->val);
    }
