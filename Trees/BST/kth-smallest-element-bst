Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.


Input: root = [3,1,4,null,2], k = 1
Output: 1

Input: root = [5,3,6,2,4,null,null,1], k = 3
Output: 3
  
  Recursive :
  vector <int> ans;
   void inorder(TreeNode* root){
        if(root == NULL) return;
        inorder(root -> left);
        ans.push_back(root -> val);
        inorder(root -> right);
         
    }
    
    int kthSmallest(TreeNode* root, int k){
        inorder(root);
        return ans[k - 1];
    }
    
    
 Iterative :
 int kthSmallest(TreeNode* root, int k) {
     stack < TreeNode* > st;
      TreeNode* node = root;
      int count = 0;
     while(true){
           if(node != NULL){
               st.push(node);
               node = node -> left;
          }
          else{
              if(st.empty() == true){
              break;
              }
                
              node = st.top();
              st.pop();
              count++;
              if(count == k){
                  return node -> val;
               }
                
              node = node -> right;
           }
       }
       return -1;
}

